name: Build Flutter Android APK

on:
  push:
    branches:
      - master
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get Flutter dependencies
        run: flutter pub get

      # 新增：清理 Flutter 和 Gradle 缓存
      - name: Clean Flutter and Gradle cache
        run: |
          flutter clean
          cd android
          chmod +x gradlew
          ./gradlew clean
          cd ..

      # 重新运行 flutter pub get 以生成被清理的文件
      - name: Get Flutter dependencies again
        run: flutter pub get

      # Add step to check network connection before building
      - name: Check network connection to Gradle distributions
        run: curl -v https://services.gradle.org/distributions/gradle-8.7-bin.zip -o /dev/null

      # 添加修复 isar_flutter_libs namespace 的步骤 - 完全重写
      - name: Fix isar_flutter_libs namespace issue
        run: |
          # 找到isar_flutter_libs目录
          ISAR_DIR=$(find $HOME/.pub-cache -name "isar_flutter_libs*" -type d | grep -v "src" | head -n 1)
          echo "Found isar directory: $ISAR_DIR"
          
          if [ -n "$ISAR_DIR" ]; then
            # 创建一个全新的build.gradle文件
            ISAR_GRADLE_FILE="$ISAR_DIR/android/build.gradle"
            echo "Target build.gradle path: $ISAR_GRADLE_FILE"
            
            if [ -f "$ISAR_GRADLE_FILE" ]; then
              # 备份原始文件
              cp "$ISAR_GRADLE_FILE" "${ISAR_GRADLE_FILE}.bak"
              
              # 创建新文件内容
              cat > "$ISAR_GRADLE_FILE" << 'EOF'
group 'com.isar.flutter'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    namespace 'com.isar.flutter'
    compileSdkVersion 33
    
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 33
    }
    
    lintOptions {
        disable 'InvalidPackage'
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
EOF
              echo "Created new build.gradle file with namespace"
              cat "$ISAR_GRADLE_FILE"
            else
              echo "isar_flutter_libs build.gradle not found at: $ISAR_GRADLE_FILE"
              # 尝试创建缺失的文件和目录
              mkdir -p "$(dirname "$ISAR_GRADLE_FILE")"
              
              cat > "$ISAR_GRADLE_FILE" << 'EOF'
group 'com.isar.flutter'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    namespace 'com.isar.flutter'
    compileSdkVersion 33
    
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 33
    }
    
    lintOptions {
        disable 'InvalidPackage'
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
EOF
              echo "Created new build.gradle file at: $ISAR_GRADLE_FILE"
            fi
            
            # 检查AndroidManifest.xml并修复它
            MANIFEST_FILE="$ISAR_DIR/android/src/main/AndroidManifest.xml"
            if [ -f "$MANIFEST_FILE" ]; then
              # 确保manifest有正确的package属性
              sed -i 's/<manifest[^>]*>/<manifest xmlns:android="http:\/\/schemas.android.com\/apk\/res\/android" package="com.isar.flutter">/' "$MANIFEST_FILE"
              echo "Updated AndroidManifest.xml:"
              cat "$MANIFEST_FILE"
            else
              echo "AndroidManifest.xml not found at expected location: $MANIFEST_FILE"
              # 创建目录
              mkdir -p "$(dirname "$MANIFEST_FILE")"
              # 创建基本的AndroidManifest.xml
              cat > "$MANIFEST_FILE" << 'EOF'
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.isar.flutter">
</manifest>
EOF
              echo "Created new AndroidManifest.xml at: $MANIFEST_FILE"
            fi
          else
            echo "Could not find isar_flutter_libs directory in pub cache"
            find $HOME/.pub-cache -type d | grep -i "isar"
          fi

      # 添加直接修改本地Gradle构建文件的步骤
      - name: Directly patch build files
        run: |
          # 确保isar_flutter_libs在.pub-cache中的位置
          for D in $(find $HOME/.pub-cache -name "isar_flutter_libs*" -type d)
          do
            echo "Found isar directory: $D"
            
            # 创建本地补丁文件
            mkdir -p $D/android/src/main
            
            # 创建AndroidManifest.xml
            cat > $D/android/src/main/AndroidManifest.xml << 'EOF'
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.isar.flutter">
</manifest>
EOF
            
            # 创建build.gradle
            cat > $D/android/build.gradle << 'EOF'
group 'com.isar.flutter'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    namespace 'com.isar.flutter'
    compileSdkVersion 33
    
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 33
    }
    
    lintOptions {
        disable 'InvalidPackage'
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
EOF
            echo "Created build files for: $D"
          done
          
          # 最后，列出所有创建的文件
          find $HOME/.pub-cache -name "isar_flutter_libs*" -type d -exec find {} -name "*.gradle" -o -name "*.xml" \;

      # Build the Android release APK by directly calling Gradle Wrapper
      - name: Build APK
        working-directory: ./android # Change working directory to android
        run: |
          chmod +x gradlew
          ./gradlew assembleRelease

      # 新增：检查 android/app/build 目录是否存在 (现在应该检查新的位置)
      - name: Check build/app directory
        run: ls -al build/app/
        continue-on-error: true # 即使失败也继续，以便我们看到后续错误

      # 新增：检查 android/app 目录是否存在 (这个保持不变)
      - name: Check android/app directory
        run: ls -al android/app/
        continue-on-error: true

      # 新增：检查 android 目录是否存在 (这个保持不变)
      - name: Check android directory
        run: ls -al android/
        continue-on-error: true

      # 原来的检查，现在检查新的路径
      - name: List Build Output Directory
        run: ls -R build/app/outputs/
        # 这个命令在工作空间根目录运行

      # Upload the generated APK file as an artifact
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          # Path relative to the workspace root, pointing to the redirected build output
          path: build/app/outputs/apk/release/app-release.apk