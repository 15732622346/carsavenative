name: Build Flutter Android APK

on:
  push:
    branches:
      - master
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get Flutter dependencies
        run: flutter pub get

      # 新增：清理 Flutter 和 Gradle 缓存
      - name: Clean Flutter and Gradle cache
        run: |
          flutter clean
          cd android
          chmod +x gradlew
          ./gradlew clean
          cd ..

      # 重新运行 flutter pub get 以生成被清理的文件
      - name: Get Flutter dependencies again
        run: flutter pub get

      # Add step to check network connection before building
      - name: Check network connection to Gradle distributions
        run: curl -v https://services.gradle.org/distributions/gradle-8.7-bin.zip -o /dev/null

      # 添加修复 isar_flutter_libs namespace 的步骤
      - name: Fix isar_flutter_libs namespace
        run: |
          ISAR_GRADLE_FILE="$HOME/.pub-cache/hosted/pub.dev/isar_flutter_libs-3.1.0+1/android/build.gradle"
          if [ -f "$ISAR_GRADLE_FILE" ]; then
            # 首先检查文件内容
            echo "Current build.gradle content:"
            cat "$ISAR_GRADLE_FILE"
            
            # 创建临时文件
            TMP_FILE=$(mktemp)
            
            # 使用awk在apply plugin之后添加android配置块
            awk '
              /apply plugin: "com.android.library"/ {
                print
                print "android {"
                print "    namespace \"com.isar.flutter\""
                print "    compileSdkVersion rootProject.ext.compileSdkVersion"
                print "    defaultConfig {"
                print "        minSdkVersion rootProject.ext.minSdkVersion"
                print "        targetSdkVersion rootProject.ext.targetSdkVersion"
                print "    }"
                print "}"
                next
              }
              { print }
            ' "$ISAR_GRADLE_FILE" > "$TMP_FILE"
            
            # 替换原文件
            mv "$TMP_FILE" "$ISAR_GRADLE_FILE"
            
            echo "Modified build.gradle content:"
            cat "$ISAR_GRADLE_FILE"
          else
            echo "isar_flutter_libs build.gradle not found at expected location"
            find $HOME/.pub-cache -name "isar_flutter_libs*" -type d
          fi

      # Build the Android release APK by directly calling Gradle Wrapper
      - name: Build APK
        working-directory: ./android # Change working directory to android
        run: |
          chmod +x gradlew
          ./gradlew assembleRelease

      # 新增：检查 android/app/build 目录是否存在 (现在应该检查新的位置)
      - name: Check build/app directory
        run: ls -al build/app/
        continue-on-error: true # 即使失败也继续，以便我们看到后续错误

      # 新增：检查 android/app 目录是否存在 (这个保持不变)
      - name: Check android/app directory
        run: ls -al android/app/
        continue-on-error: true

      # 新增：检查 android 目录是否存在 (这个保持不变)
      - name: Check android directory
        run: ls -al android/
        continue-on-error: true

      # 原来的检查，现在检查新的路径
      - name: List Build Output Directory
        run: ls -R build/app/outputs/
        # 这个命令在工作空间根目录运行

      # Upload the generated APK file as an artifact
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          # Path relative to the workspace root, pointing to the redirected build output
          path: build/app/outputs/apk/release/app-release.apk